'use client';
import { useState, useEffect } from 'react';
import styles from '@/styles/admin/customer/CustomerDetailModal.module.css';

export default function CustomerDetailModal({ 
    isOpen, 
    onClose, 
    customer,
    onSave
}) {
    const [memo, setMemo] = useState('');
    const [isEditing, setIsEditing] = useState(false);
    const [originalMemo, setOriginalMemo] = useState('');

    // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå Í≥†Í∞ùÏùò Î©îÎ™® Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
    useEffect(() => {
        if (isOpen && customer) {
            const customerMemo = customer.memo || '';
            setMemo(customerMemo);
            setOriginalMemo(customerMemo);
            setIsEditing(false);
        }
    }, [isOpen, customer]);

    // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
    useEffect(() => {
        const handleEsc = (e) => {
            if (e.key === 'Escape' && isOpen) {
                handleClose();
            }
        };
        
        if (isOpen) {
            document.addEventListener('keydown', handleEsc);
            document.body.style.overflow = 'hidden';
        }
        
        return () => {
            document.removeEventListener('keydown', handleEsc);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen]);

    // Î™®Îã¨ Îã´Í∏∞
    const handleClose = () => {
        // Ìé∏Ïßë Ï§ëÏù¥Î©¥ ÏõêÎ≥∏ÏúºÎ°ú ÎêòÎèåÎ¶¨Í∏∞
        if (isEditing) {
            setMemo(originalMemo);
            setIsEditing(false);
        }
        onClose();
    };

    // ÏàòÏ†ï Î™®Îìú ÌÜ†Í∏Ä
    const handleEditToggle = () => {
        if (isEditing) {
            // Ï∑®ÏÜå Ïãú ÏõêÎ≥∏ÏúºÎ°ú ÎêòÎèåÎ¶¨Í∏∞
            setMemo(originalMemo);
        }
        setIsEditing(!isEditing);
    };

    // Î©îÎ™® Ï†ÄÏû•
    const handleSave = async () => {
        try {
            // API ÏöîÏ≤≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò
            const requestBody = {
                customerId: customer.id,
                memo: memo
            };
            
            // Ïã§Ï†úÎ°úÎäî Ïó¨Í∏∞ÏÑú API Ìò∏Ï∂ú
            console.log('Î©îÎ™® Ï†ÄÏû• ÏöîÏ≤≠:', requestBody);
            
            // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Ï†ÄÏû• ÏΩúÎ∞± Ìò∏Ï∂ú
            if (onSave) {
                await onSave(customer.id, memo);
            }
            
            setOriginalMemo(memo);
            setIsEditing(false);
        } catch (error) {
            console.error('Î©îÎ™® Ï†ÄÏû• Ïã§Ìå®:', error);
        }
    };

    // Í∏àÏï° Ìè¨Îß∑ÌåÖ
    const formatCurrency = (amount) => {
        return `‚Ç© ${amount.toLocaleString()}`;
    };

    // ÏÉùÎÖÑÏõîÏùº Ìè¨Îß∑ÌåÖ (Í∞ÄÏÉÅ Îç∞Ïù¥ÌÑ∞)
    const formatBirthDate = (customer) => {
        // Ïã§Ï†úÎ°úÎäî customer.birthDate ÏÇ¨Ïö©
        return '1990.03.15';
    };

    if (!isOpen || !customer) return null;

    return (
        <div className={styles.modalOverlay} onClick={handleClose}>
            <div 
                className={styles.modal} 
                onClick={(e) => e.stopPropagation()}
            >
                {/* Ìó§Îçî */}
                <div className={styles.modalHeader}>
                    <div className={styles.headerContent}>
                        <span className={styles.headerIcon}>üë§</span>
                        <span className={styles.headerTitle}>ÌöåÏõê ÏÉÅÏÑ∏ Ï†ïÎ≥¥</span>
                    </div>
                    <button 
                        className={styles.closeBtn}
                        onClick={handleClose}
                        aria-label="Îã´Í∏∞"
                    >
                        ‚úï
                    </button>
                </div>

                {/* Î∞îÎîî */}
                <div className={styles.modalBody}>
                    {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÑπÏÖò */}
                    <div className={styles.section}>
                        <div className={styles.sectionHeader}>
                            <span className={styles.sectionIcon}>üìã</span>
                            <h3 className={styles.sectionTitle}>Í∏∞Î≥∏ Ï†ïÎ≥¥</h3>
                        </div>
                        
                        <div className={styles.customerInfo}>
                            <div className={styles.profileSection}>
                                <div className={styles.profileAvatar}>
                                    <div className={styles.avatarPlaceholder}></div>
                                </div>
                                <div className={styles.profileDetails}>
                                    <div className={styles.nameRow}>
                                        <span className={styles.customerName}>{customer.name}</span>
                                        {customer.isVip && <span className={styles.vipBadge}>VIP</span>}
                                    </div>
                                    <div className={styles.contactInfo}>
                                        <span className={styles.phone}>üìû {customer.phone}</span>
                                        <span className={styles.gender}>ÎÇ®ÏÑ±</span>
                                    </div>
                                    <div className={styles.birthDate}>
                                        üéÇ {formatBirthDate(customer)}
                                    </div>
                                    <div className={styles.moreBtn}>¬∑¬∑¬∑</div>
                                </div>
                            </div>
                            
                            <div className={styles.statsGrid}>
                                <div className={styles.statCard}>
                                    <div className={styles.statLabel}>ÎßàÏßÄÎßâ Î∞©Î¨∏</div>
                                    <div className={styles.statValue}>{customer.lastVisit}</div>
                                </div>
                                <div className={styles.statCard}>
                                    <div className={styles.statLabel}>ÏÑ†Ìò∏ ÏÑúÎπÑÏä§</div>
                                    <div className={styles.statValue}>{customer.preferredServices.join(', ')}</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Î©îÎ™® ÏÑπÏÖò */}
                    <div className={styles.section}>
                        <div className={styles.sectionHeader}>
                            <span className={styles.sectionIcon}>üìù</span>
                            <h3 className={styles.sectionTitle}>Î©îÎ™®</h3>
                        </div>
                        
                        <div className={styles.memoSection}>
                            {isEditing ? (
                                <textarea
                                    className={styles.memoTextarea}
                                    value={memo}
                                    onChange={(e) => setMemo(e.target.value)}
                                    placeholder="Í≥†Í∞ùÏóê ÎåÄÌïú Î©îÎ™®Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                                    rows={4}
                                    autoFocus
                                />
                            ) : (
                                <div className={styles.memoDisplay}>
                                    {memo || 'Î©îÎ™®Í∞Ä ÏóÜÏäµÎãàÎã§.'}
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* Ìë∏ÌÑ∞ */}
                <div className={styles.modalFooter}>
                    {isEditing ? (
                        <>
                            <button 
                                className={styles.cancelBtn}
                                onClick={handleEditToggle}
                            >
                                Ï∑®ÏÜå
                            </button>
                            <button 
                                className={styles.saveBtn}
                                onClick={handleSave}
                            >
                                ÏàòÏ†ï
                            </button>
                        </>
                    ) : (
                        <>
                            <button 
                                className={styles.editBtn}
                                onClick={handleEditToggle}
                            >
                                ÏàòÏ†ï
                            </button>
                            <button 
                                className={styles.deleteBtn}
                                onClick={handleClose}
                            >
                                ÏÇ≠Ï†ú
                            </button>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
}